// Code generated by ent, DO NOT EDIT.

package aiemployee

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/chaitin/MonkeyCode/backend/consts"
	"github.com/chaitin/MonkeyCode/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldLTE(FieldID, id))
}

// AdminID applies equality check predicate on the "admin_id" field. It's identical to AdminIDEQ.
func AdminID(v uuid.UUID) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldAdminID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldUserID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldName, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v consts.AIEmployeePosition) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldEQ(FieldPosition, vc))
}

// RepositoryURL applies equality check predicate on the "repository_url" field. It's identical to RepositoryURLEQ.
func RepositoryURL(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldRepositoryURL, v))
}

// RepositoryUser applies equality check predicate on the "repository_user" field. It's identical to RepositoryUserEQ.
func RepositoryUser(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldRepositoryUser, v))
}

// Platform applies equality check predicate on the "platform" field. It's identical to PlatformEQ.
func Platform(v consts.RepoPlatform) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldEQ(FieldPlatform, vc))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldToken, v))
}

// WebhookSecret applies equality check predicate on the "webhook_secret" field. It's identical to WebhookSecretEQ.
func WebhookSecret(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldWebhookSecret, v))
}

// WebhookURL applies equality check predicate on the "webhook_url" field. It's identical to WebhookURLEQ.
func WebhookURL(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldWebhookURL, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v consts.CreatedBy) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldEQ(FieldCreatedBy, vc))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldUpdatedAt, v))
}

// AdminIDEQ applies the EQ predicate on the "admin_id" field.
func AdminIDEQ(v uuid.UUID) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldAdminID, v))
}

// AdminIDNEQ applies the NEQ predicate on the "admin_id" field.
func AdminIDNEQ(v uuid.UUID) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNEQ(FieldAdminID, v))
}

// AdminIDIn applies the In predicate on the "admin_id" field.
func AdminIDIn(vs ...uuid.UUID) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldIn(FieldAdminID, vs...))
}

// AdminIDNotIn applies the NotIn predicate on the "admin_id" field.
func AdminIDNotIn(vs ...uuid.UUID) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNotIn(FieldAdminID, vs...))
}

// AdminIDIsNil applies the IsNil predicate on the "admin_id" field.
func AdminIDIsNil() predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldIsNull(FieldAdminID))
}

// AdminIDNotNil applies the NotNil predicate on the "admin_id" field.
func AdminIDNotNil() predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNotNull(FieldAdminID))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNotNull(FieldUserID))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldContainsFold(FieldName, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v consts.AIEmployeePosition) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldEQ(FieldPosition, vc))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v consts.AIEmployeePosition) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldNEQ(FieldPosition, vc))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...consts.AIEmployeePosition) predicate.AIEmployee {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.AIEmployee(sql.FieldIn(FieldPosition, v...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...consts.AIEmployeePosition) predicate.AIEmployee {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.AIEmployee(sql.FieldNotIn(FieldPosition, v...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v consts.AIEmployeePosition) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldGT(FieldPosition, vc))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v consts.AIEmployeePosition) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldGTE(FieldPosition, vc))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v consts.AIEmployeePosition) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldLT(FieldPosition, vc))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v consts.AIEmployeePosition) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldLTE(FieldPosition, vc))
}

// PositionContains applies the Contains predicate on the "position" field.
func PositionContains(v consts.AIEmployeePosition) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldContains(FieldPosition, vc))
}

// PositionHasPrefix applies the HasPrefix predicate on the "position" field.
func PositionHasPrefix(v consts.AIEmployeePosition) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldHasPrefix(FieldPosition, vc))
}

// PositionHasSuffix applies the HasSuffix predicate on the "position" field.
func PositionHasSuffix(v consts.AIEmployeePosition) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldHasSuffix(FieldPosition, vc))
}

// PositionEqualFold applies the EqualFold predicate on the "position" field.
func PositionEqualFold(v consts.AIEmployeePosition) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldEqualFold(FieldPosition, vc))
}

// PositionContainsFold applies the ContainsFold predicate on the "position" field.
func PositionContainsFold(v consts.AIEmployeePosition) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldContainsFold(FieldPosition, vc))
}

// RepositoryURLEQ applies the EQ predicate on the "repository_url" field.
func RepositoryURLEQ(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldRepositoryURL, v))
}

// RepositoryURLNEQ applies the NEQ predicate on the "repository_url" field.
func RepositoryURLNEQ(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNEQ(FieldRepositoryURL, v))
}

// RepositoryURLIn applies the In predicate on the "repository_url" field.
func RepositoryURLIn(vs ...string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldIn(FieldRepositoryURL, vs...))
}

// RepositoryURLNotIn applies the NotIn predicate on the "repository_url" field.
func RepositoryURLNotIn(vs ...string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNotIn(FieldRepositoryURL, vs...))
}

// RepositoryURLGT applies the GT predicate on the "repository_url" field.
func RepositoryURLGT(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldGT(FieldRepositoryURL, v))
}

// RepositoryURLGTE applies the GTE predicate on the "repository_url" field.
func RepositoryURLGTE(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldGTE(FieldRepositoryURL, v))
}

// RepositoryURLLT applies the LT predicate on the "repository_url" field.
func RepositoryURLLT(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldLT(FieldRepositoryURL, v))
}

// RepositoryURLLTE applies the LTE predicate on the "repository_url" field.
func RepositoryURLLTE(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldLTE(FieldRepositoryURL, v))
}

// RepositoryURLContains applies the Contains predicate on the "repository_url" field.
func RepositoryURLContains(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldContains(FieldRepositoryURL, v))
}

// RepositoryURLHasPrefix applies the HasPrefix predicate on the "repository_url" field.
func RepositoryURLHasPrefix(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldHasPrefix(FieldRepositoryURL, v))
}

// RepositoryURLHasSuffix applies the HasSuffix predicate on the "repository_url" field.
func RepositoryURLHasSuffix(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldHasSuffix(FieldRepositoryURL, v))
}

// RepositoryURLEqualFold applies the EqualFold predicate on the "repository_url" field.
func RepositoryURLEqualFold(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEqualFold(FieldRepositoryURL, v))
}

// RepositoryURLContainsFold applies the ContainsFold predicate on the "repository_url" field.
func RepositoryURLContainsFold(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldContainsFold(FieldRepositoryURL, v))
}

// RepositoryUserEQ applies the EQ predicate on the "repository_user" field.
func RepositoryUserEQ(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldRepositoryUser, v))
}

// RepositoryUserNEQ applies the NEQ predicate on the "repository_user" field.
func RepositoryUserNEQ(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNEQ(FieldRepositoryUser, v))
}

// RepositoryUserIn applies the In predicate on the "repository_user" field.
func RepositoryUserIn(vs ...string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldIn(FieldRepositoryUser, vs...))
}

// RepositoryUserNotIn applies the NotIn predicate on the "repository_user" field.
func RepositoryUserNotIn(vs ...string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNotIn(FieldRepositoryUser, vs...))
}

// RepositoryUserGT applies the GT predicate on the "repository_user" field.
func RepositoryUserGT(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldGT(FieldRepositoryUser, v))
}

// RepositoryUserGTE applies the GTE predicate on the "repository_user" field.
func RepositoryUserGTE(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldGTE(FieldRepositoryUser, v))
}

// RepositoryUserLT applies the LT predicate on the "repository_user" field.
func RepositoryUserLT(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldLT(FieldRepositoryUser, v))
}

// RepositoryUserLTE applies the LTE predicate on the "repository_user" field.
func RepositoryUserLTE(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldLTE(FieldRepositoryUser, v))
}

// RepositoryUserContains applies the Contains predicate on the "repository_user" field.
func RepositoryUserContains(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldContains(FieldRepositoryUser, v))
}

// RepositoryUserHasPrefix applies the HasPrefix predicate on the "repository_user" field.
func RepositoryUserHasPrefix(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldHasPrefix(FieldRepositoryUser, v))
}

// RepositoryUserHasSuffix applies the HasSuffix predicate on the "repository_user" field.
func RepositoryUserHasSuffix(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldHasSuffix(FieldRepositoryUser, v))
}

// RepositoryUserEqualFold applies the EqualFold predicate on the "repository_user" field.
func RepositoryUserEqualFold(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEqualFold(FieldRepositoryUser, v))
}

// RepositoryUserContainsFold applies the ContainsFold predicate on the "repository_user" field.
func RepositoryUserContainsFold(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldContainsFold(FieldRepositoryUser, v))
}

// PlatformEQ applies the EQ predicate on the "platform" field.
func PlatformEQ(v consts.RepoPlatform) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldEQ(FieldPlatform, vc))
}

// PlatformNEQ applies the NEQ predicate on the "platform" field.
func PlatformNEQ(v consts.RepoPlatform) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldNEQ(FieldPlatform, vc))
}

// PlatformIn applies the In predicate on the "platform" field.
func PlatformIn(vs ...consts.RepoPlatform) predicate.AIEmployee {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.AIEmployee(sql.FieldIn(FieldPlatform, v...))
}

// PlatformNotIn applies the NotIn predicate on the "platform" field.
func PlatformNotIn(vs ...consts.RepoPlatform) predicate.AIEmployee {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.AIEmployee(sql.FieldNotIn(FieldPlatform, v...))
}

// PlatformGT applies the GT predicate on the "platform" field.
func PlatformGT(v consts.RepoPlatform) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldGT(FieldPlatform, vc))
}

// PlatformGTE applies the GTE predicate on the "platform" field.
func PlatformGTE(v consts.RepoPlatform) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldGTE(FieldPlatform, vc))
}

// PlatformLT applies the LT predicate on the "platform" field.
func PlatformLT(v consts.RepoPlatform) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldLT(FieldPlatform, vc))
}

// PlatformLTE applies the LTE predicate on the "platform" field.
func PlatformLTE(v consts.RepoPlatform) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldLTE(FieldPlatform, vc))
}

// PlatformContains applies the Contains predicate on the "platform" field.
func PlatformContains(v consts.RepoPlatform) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldContains(FieldPlatform, vc))
}

// PlatformHasPrefix applies the HasPrefix predicate on the "platform" field.
func PlatformHasPrefix(v consts.RepoPlatform) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldHasPrefix(FieldPlatform, vc))
}

// PlatformHasSuffix applies the HasSuffix predicate on the "platform" field.
func PlatformHasSuffix(v consts.RepoPlatform) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldHasSuffix(FieldPlatform, vc))
}

// PlatformEqualFold applies the EqualFold predicate on the "platform" field.
func PlatformEqualFold(v consts.RepoPlatform) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldEqualFold(FieldPlatform, vc))
}

// PlatformContainsFold applies the ContainsFold predicate on the "platform" field.
func PlatformContainsFold(v consts.RepoPlatform) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldContainsFold(FieldPlatform, vc))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldHasSuffix(FieldToken, v))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldContainsFold(FieldToken, v))
}

// WebhookSecretEQ applies the EQ predicate on the "webhook_secret" field.
func WebhookSecretEQ(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldWebhookSecret, v))
}

// WebhookSecretNEQ applies the NEQ predicate on the "webhook_secret" field.
func WebhookSecretNEQ(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNEQ(FieldWebhookSecret, v))
}

// WebhookSecretIn applies the In predicate on the "webhook_secret" field.
func WebhookSecretIn(vs ...string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldIn(FieldWebhookSecret, vs...))
}

// WebhookSecretNotIn applies the NotIn predicate on the "webhook_secret" field.
func WebhookSecretNotIn(vs ...string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNotIn(FieldWebhookSecret, vs...))
}

// WebhookSecretGT applies the GT predicate on the "webhook_secret" field.
func WebhookSecretGT(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldGT(FieldWebhookSecret, v))
}

// WebhookSecretGTE applies the GTE predicate on the "webhook_secret" field.
func WebhookSecretGTE(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldGTE(FieldWebhookSecret, v))
}

// WebhookSecretLT applies the LT predicate on the "webhook_secret" field.
func WebhookSecretLT(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldLT(FieldWebhookSecret, v))
}

// WebhookSecretLTE applies the LTE predicate on the "webhook_secret" field.
func WebhookSecretLTE(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldLTE(FieldWebhookSecret, v))
}

// WebhookSecretContains applies the Contains predicate on the "webhook_secret" field.
func WebhookSecretContains(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldContains(FieldWebhookSecret, v))
}

// WebhookSecretHasPrefix applies the HasPrefix predicate on the "webhook_secret" field.
func WebhookSecretHasPrefix(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldHasPrefix(FieldWebhookSecret, v))
}

// WebhookSecretHasSuffix applies the HasSuffix predicate on the "webhook_secret" field.
func WebhookSecretHasSuffix(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldHasSuffix(FieldWebhookSecret, v))
}

// WebhookSecretEqualFold applies the EqualFold predicate on the "webhook_secret" field.
func WebhookSecretEqualFold(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEqualFold(FieldWebhookSecret, v))
}

// WebhookSecretContainsFold applies the ContainsFold predicate on the "webhook_secret" field.
func WebhookSecretContainsFold(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldContainsFold(FieldWebhookSecret, v))
}

// WebhookURLEQ applies the EQ predicate on the "webhook_url" field.
func WebhookURLEQ(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldWebhookURL, v))
}

// WebhookURLNEQ applies the NEQ predicate on the "webhook_url" field.
func WebhookURLNEQ(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNEQ(FieldWebhookURL, v))
}

// WebhookURLIn applies the In predicate on the "webhook_url" field.
func WebhookURLIn(vs ...string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldIn(FieldWebhookURL, vs...))
}

// WebhookURLNotIn applies the NotIn predicate on the "webhook_url" field.
func WebhookURLNotIn(vs ...string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNotIn(FieldWebhookURL, vs...))
}

// WebhookURLGT applies the GT predicate on the "webhook_url" field.
func WebhookURLGT(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldGT(FieldWebhookURL, v))
}

// WebhookURLGTE applies the GTE predicate on the "webhook_url" field.
func WebhookURLGTE(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldGTE(FieldWebhookURL, v))
}

// WebhookURLLT applies the LT predicate on the "webhook_url" field.
func WebhookURLLT(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldLT(FieldWebhookURL, v))
}

// WebhookURLLTE applies the LTE predicate on the "webhook_url" field.
func WebhookURLLTE(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldLTE(FieldWebhookURL, v))
}

// WebhookURLContains applies the Contains predicate on the "webhook_url" field.
func WebhookURLContains(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldContains(FieldWebhookURL, v))
}

// WebhookURLHasPrefix applies the HasPrefix predicate on the "webhook_url" field.
func WebhookURLHasPrefix(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldHasPrefix(FieldWebhookURL, v))
}

// WebhookURLHasSuffix applies the HasSuffix predicate on the "webhook_url" field.
func WebhookURLHasSuffix(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldHasSuffix(FieldWebhookURL, v))
}

// WebhookURLEqualFold applies the EqualFold predicate on the "webhook_url" field.
func WebhookURLEqualFold(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEqualFold(FieldWebhookURL, v))
}

// WebhookURLContainsFold applies the ContainsFold predicate on the "webhook_url" field.
func WebhookURLContainsFold(v string) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldContainsFold(FieldWebhookURL, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v consts.CreatedBy) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldEQ(FieldCreatedBy, vc))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v consts.CreatedBy) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldNEQ(FieldCreatedBy, vc))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...consts.CreatedBy) predicate.AIEmployee {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.AIEmployee(sql.FieldIn(FieldCreatedBy, v...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...consts.CreatedBy) predicate.AIEmployee {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = string(vs[i])
	}
	return predicate.AIEmployee(sql.FieldNotIn(FieldCreatedBy, v...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v consts.CreatedBy) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldGT(FieldCreatedBy, vc))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v consts.CreatedBy) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldGTE(FieldCreatedBy, vc))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v consts.CreatedBy) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldLT(FieldCreatedBy, vc))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v consts.CreatedBy) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldLTE(FieldCreatedBy, vc))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v consts.CreatedBy) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldContains(FieldCreatedBy, vc))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v consts.CreatedBy) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldHasPrefix(FieldCreatedBy, vc))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v consts.CreatedBy) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldHasSuffix(FieldCreatedBy, vc))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v consts.CreatedBy) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldEqualFold(FieldCreatedBy, vc))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v consts.CreatedBy) predicate.AIEmployee {
	vc := string(v)
	return predicate.AIEmployee(sql.FieldContainsFold(FieldCreatedBy, vc))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AIEmployee {
	return predicate.AIEmployee(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasAdmin applies the HasEdge predicate on the "admin" edge.
func HasAdmin() predicate.AIEmployee {
	return predicate.AIEmployee(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AdminTable, AdminColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminWith applies the HasEdge predicate on the "admin" edge with a given conditions (other predicates).
func HasAdminWith(preds ...predicate.Admin) predicate.AIEmployee {
	return predicate.AIEmployee(func(s *sql.Selector) {
		step := newAdminStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.AIEmployee {
	return predicate.AIEmployee(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.AIEmployee {
	return predicate.AIEmployee(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AIEmployee) predicate.AIEmployee {
	return predicate.AIEmployee(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AIEmployee) predicate.AIEmployee {
	return predicate.AIEmployee(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AIEmployee) predicate.AIEmployee {
	return predicate.AIEmployee(sql.NotPredicates(p))
}
